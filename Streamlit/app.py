# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AEEWgCUNkVPdUV905PqVG_8_re3RL9T8
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from google.cloud import bigquery
import vertexai
from vertexai.generative_models import GenerativeModel, ChatSession

# Page configuration with a runner emoji and Strava's color
st.set_page_config(
    page_title="Strava Dashboard",
    page_icon=":runner:",  # Runner emoji
    layout="wide",
)

# Custom CSS to change the background to Strava orange
st.markdown("""
    <style>
        body {
            background-color: #fc4c02;  /* Strava orange */
            color: white;  /* Text color to make it readable on orange background */
        }
        .block-container {
            background-color: transparent;
        }
        h1, h2, h3, h4, h5, h6 {
            color: white;
        }
        .css-1v3fvcr {
            background-color: #fc4c02 !important;
        }
    </style>
    """, unsafe_allow_html=True)

# Display the image from GCS
st.image(
    "https://storage.googleapis.com/strava-logo/stravalogo.png",  # Image URL from GCS
    caption="Strava Dashboard",
    use_container_width=False,
    width=400,  # Adjust image size as needed
)

# Initialize Vertex AI
GCP_PROJECT = 'strava-etl'
GCP_REGION = "us-central1"
vertexai.init(project=GCP_PROJECT, location=GCP_REGION)

model = GenerativeModel("gemini-1.5-flash-002")
chat_session = model.start_chat(response_validation=False)

# Function to fetch Strava data from BigQuery
def get_strava_data():
    query = """
    SELECT *
    FROM `strava-etl.strava_data.activities`
    WHERE start_date_local >= '2024-01-01'
    ORDER BY start_date_local DESC
    LIMIT 50
    """
    client = bigquery.Client(project=GCP_PROJECT, location="US")
    query_job = client.query(query)
    result = query_job.result()  # Wait for the query to finish

    # Convert result to DataFrame
    data = pd.DataFrame([dict(row.items()) for row in result])
    return data

# Function to fetch ML predictions (clustering_labels) from BigQuery
def get_ml_predictions():
    query = """
    SELECT id, start_date, distance, moving_time, average_heartrate, run_type_str
    FROM `strava-etl.strava_data.clustering_labels`
    ORDER BY start_date DESC
    LIMIT 50
    """
    client = bigquery.Client(project=GCP_PROJECT, location="US")
    query_job = client.query(query)
    result = query_job.result()  # Wait for the query to finish

    # Convert result to DataFrame
    predictions = pd.DataFrame([dict(row.items()) for row in result])
    return predictions

# Function to get chat response from Vertex AI
def get_chat_response(chat: ChatSession, prompt: str, dataset: pd.DataFrame) -> str:
    # Convert the first 50 rows of the DataFrame to a JSON-like format (records)
    dataset_sample = dataset.head(50).to_dict(orient='records')  # Get the first 50 rows

    # Summarize the dataset context (optionally provide aggregation if necessary to reduce size)
    dataset_summary = f"""
    Here are the first 50 rows of your Strava data:
    {dataset_sample}
    You can ask me questions about trends, gear usage, total distance, or any specific activity.
    """

    # Full prompt with the dataset sample
    full_prompt = f"{dataset_summary}\n\nQuestion: {prompt}"

    # Get the chatbot's response
    text_response = []
    responses = chat.send_message(full_prompt, stream=True)
    for chunk in responses:
        text_response.append(chunk.text)

    return "".join(text_response)

# App UI
st.markdown("### Welcome to your Strava Data Dashboard!")

# Fetch and display Strava data
try:
    strava_data_df = get_strava_data()  # Fetch Strava data
    ml_predictions_df = get_ml_predictions()  # Fetch ML predictions

    # Create tabs for Data Overview, Chatbot, and ML Predictions
    tab1, tab2, tab3 = st.tabs(["ðŸ“Š Data Overview", "ðŸ¤– Chatbot", "ðŸ”® ML Predictions"])

    # Tab 1: Data Overview
    with tab1:
        st.subheader("Recent Strava Activities")
        st.dataframe(strava_data_df)  # Display Strava data in a table

        # Summary Statistics
        st.subheader("Summary Statistics")
        stats = {
            "Total Activities": len(strava_data_df),
            "Total Distance (meters)": strava_data_df['distance'].sum(),
            "Average Distance (meters)": strava_data_df['distance'].mean(),
            "Total Calories Burned": strava_data_df['calories'].sum(),
            "Average Speed (m/s)": strava_data_df['average_speed'].mean(),
        }
        for key, value in stats.items():
            st.write(f"- **{key}:** {value:.2f}")

    # Tab 2: Chatbot
    with tab2:
        st.subheader("Ask the Chatbot")
        prompt = st.text_input("Ask a question about your Strava data:")
        if prompt:
            response = get_chat_response(chat_session, prompt, strava_data_df)
            st.markdown(f"**Chatbot Response:** {response}")

        # Add note below the chatbot informing users
        st.markdown("**Note**: The chatbot can only answer questions based on the last 50 runs.")

    # Tab 3: ML Predictions
    with tab3:
        st.subheader("ML Predictions - Clustering Labels")
        st.dataframe(ml_predictions_df)  # Display ML predictions in a table

        # 3D Scatter Plot: Plotting the distribution of distance, moving_time, and average_heartrate
        st.subheader("3D Scatter Plot: Distance vs Moving Time vs Average Heart Rate")

        # Highlight the latest run
        latest_run = ml_predictions_df.iloc[0]  # Assuming the first row is the latest based on sorting by start_date

        # Create a 3D scatter plot
        fig = px.scatter_3d(
            ml_predictions_df,
            x='distance',
            y='moving_time',
            z='average_heartrate',
            color='run_type_str',  # Color points by run_type_str
            title='3D Scatter Plot of Runs',
            labels={
                'distance': 'Distance (m)',
                'moving_time': 'Moving Time (s)',
                'average_heartrate': 'Average Heart Rate (bpm)'
            },
            category_orders={"run_type_str": ml_predictions_df['run_type_str'].unique()}  # Ensure consistent color mapping
        )

        # Add the latest run as a distinct marker
        fig.add_scatter3d(
            x=[latest_run['distance']],
            y=[latest_run['moving_time']],
            z=[latest_run['average_heartrate']],
            mode='markers+text',
            marker=dict(
                size=12,  # Larger size for the latest run
                symbol='diamond',  # Unique marker symbol
                color=fig.data[[trace.name for trace in fig.data].index(latest_run['run_type_str'])].marker.color,  # Match cluster color
            ),
            name="Latest Run",  # Add a custom legend entry
            text=["Latest Run"],  # Label for the latest run
            textposition="top center",
            showlegend=True  # Ensure it shows in the legend
        )

        # Display the plot in Streamlit
        st.plotly_chart(fig)

except Exception as e:
    st.error(f"An error occurred: {e}")

# Footer
st.markdown("---")
st.markdown("Your Strava Journey, Visualized | Powered by Streamlit and Strava Data | Team 4: Bennett Blanco | Yu-Chin (Alyssa) Chen | Dhruv Shah | Ahmed Farid Khan")